//2016年04月19日 星期二 09时05分42秒 
//信息获取时间一致
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/CameraInfo.h>
#include <message_filters/sync_policies/approximate_time.h>
#include <ros/callback_queue.h>
#include <boost/bind.hpp>

//
#include <opencv2/highgui/highgui.hpp>
#include <opencv/cv.h>
#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <sensor_msgs/PointCloud2.h>
//pcl
#include <pcl/point_cloud.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/visualization/cloud_viewer.h>
#include <pcl/features/integral_image_normal.h>

using namespace sensor_msgs;
using namespace message_filters;
//pcl::visualization::PCLVisualizer viewer("PCL Viewer");
typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image,sensor_msgs::Image, sensor_msgs::PointCloud2> MySyncPolicy;

void callback(const ImageConstPtr& image, const ImageConstPtr& image2, const PointCloud2::ConstPtr& Callback_Points)
{
    //compute normals and visualize from normal_estimation_using_integral_images
    pcl::PointCloud<pcl::PointXYZ>::Ptr cloud (new pcl::PointCloud<pcl::PointXYZ>);
    pcl::fromROSMsg (*Callback_Points, *cloud);
    // estimate normals
    pcl::PointCloud<pcl::Normal>::Ptr normals (new pcl::PointCloud<pcl::Normal>);

    pcl::IntegralImageNormalEstimation<pcl::PointXYZ, pcl::Normal> ne;
    ne.setNormalEstimationMethod (ne.AVERAGE_3D_GRADIENT);
    ne.setMaxDepthChangeFactor(0.05f);
    ne.setNormalSmoothingSize(10.0f);
    ne.setInputCloud(cloud);
    ne.compute(*normals);
    
    //add color information
    cv_bridge::CvImagePtr cv_ptr;
	try
	{
	   	cv_ptr = cv_bridge::toCvCopy(image, sensor_msgs::image_encodings::BGR8);
	}
	catch (cv_bridge::Exception& e)
	{
	     	ROS_ERROR("cv_bridge exception: %s", e.what());
	      	return;
	}
	IplImage ipl_imgColor = cv_ptr->image;
	IplImage *imgColor= cvCloneImage(&ipl_imgColor);
	//cvNamedWindow("color");
	//cvShowImage("color", imgColor);
	//cvWaitKey(100);
	pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_xyzrgb (new pcl::PointCloud<pcl::PointXYZRGB>);
    int width = cloud->width;
    int height = cloud->height;
    cloud_xyzrgb->width = width;
    cloud_xyzrgb->height = height;
    cloud_xyzrgb->is_dense = false;
    cloud_xyzrgb->points.resize (cloud_xyzrgb->width * cloud_xyzrgb->height);
    //cout<<"build\n";
    for (int j = 0; j < width; j++)
    {
        for (int i = 0; i < height; i++)
        { 
            int b = (int)CV_IMAGE_ELEM(imgColor, uchar, i, j*3+0);
            int g = (int)CV_IMAGE_ELEM(imgColor, uchar, i, j*3+1);
            int r = (int)CV_IMAGE_ELEM(imgColor, uchar, i, j*3+2);
            
            float x = (*cloud)(j,i).x;
            float y = (*cloud)(j,i).y;
            float z = (*cloud)(j,i).z;
            if(isnan(x) || isnan(y) || isnan(z))
            {
                //cout<<"out of range\n";
                continue;
            }
            //cout<<"{"<<i<<", "<<j<<"}\t"<<x<<"\t"<<y<<"\t"<<z<<"\n";             
            (*cloud_xyzrgb)(j,i).x = x;
            (*cloud_xyzrgb)(j,i).y = y;
            (*cloud_xyzrgb)(j,i).z = z;
            
            (*cloud_xyzrgb)(j,i).r = r;
            (*cloud_xyzrgb)(j,i).g = g;
            (*cloud_xyzrgb)(j,i).b = b;            
        }
    }
    
    // visualize normals 
    pcl::visualization::PCLVisualizer viewer("PCL Viewer");
    pcl::visualization::PointCloudColorHandlerCustom<pcl::PointXYZ> cloud_color_handler (cloud, 200, 200, 200);
    viewer.addPointCloudNormals<pcl::PointXYZ, pcl::Normal>(cloud, normals);
    viewer.addCoordinateSystem (1.0, 0);
    viewer.setBackgroundColor(0.1, 0.1, 0.1, 0); // Setting background to a dark grey
    cout<<"visualize\n";
    while (!viewer.wasStopped ())
    {
        viewer.spinOnce ();
    }
    
    //viewer.showCloud(cloud_xyzrgb);
    cvReleaseImage(&imgColor);
}

int main(int argc, char** argv)
{   
    ros::init(argc, argv, "vision_node");

    ros::NodeHandle nh;
   
    int global_subscriber_queue_size = 1;
    
    message_filters::Subscriber<sensor_msgs::Image> visual_sub_ (nh, "/camera/rgb/image_raw", global_subscriber_queue_size);
    message_filters::Subscriber<sensor_msgs::Image> depth_sub_(nh, "/camera/depth/image", global_subscriber_queue_size);
    message_filters::Subscriber<sensor_msgs::PointCloud2> cloud_sub_(nh, "/camera/depth/points", global_subscriber_queue_size);
    
    message_filters::Synchronizer<MySyncPolicy> sync_(MySyncPolicy(10),  visual_sub_, depth_sub_, cloud_sub_);
    sync_.registerCallback(boost::bind(&callback, _1, _2, _3));
  
    ros::spin();

    return 0;
}

